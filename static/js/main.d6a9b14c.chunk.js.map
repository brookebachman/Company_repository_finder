{"version":3,"sources":["components/CommitCard.js","container/Commit.js","components/RepoCard.js","container/Repo.js","components/Fetch.js","App.js","serviceWorker.js","index.js"],"names":["CommitCard","props","id","size","commit","author","name","year","committer","date","slice","month","day","convertDate","message","sha","Commit","commits","map","mapOverCommits","RepoCard","state","clicked","company","url","fetch","then","resp","json","data","setState","this","repo","alt","src","owner","avatar_url","language","stargazers_count","description","onClick","getTheCommits","Component","Repo","repos","sort","a","b","Fetch","App","companyResp","show","changeCompany","event","value","target","preventDefault","onSubmit","fetchTheRepos","for","onChange","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d6a9b14c.chunk.js","sourcesContent":["import React from 'react';\nimport { Edit } from '@styled-icons/boxicons-solid/Edit';\n\nconst CommitCard = (props) => {\n\tconst convertDate = (props) => {\n\t\tconst year = props.commit.commit.committer.date.slice(0, 4);\n\t\tlet month = props.commit.commit.committer.date.slice(5, 7);\n\t\tconst day = props.commit.commit.committer.date.slice(8, 10);\n\t\tif (month < 10) {\n\t\t\tmonth = month = props.commit.commit.committer.date[6];\n\t\t}\n\t\treturn `${month}/${day}/${year}`;\n\t};\n\n\treturn (\n\t\t<div id=\"cc\">\n\t\t\t<div id=\"commit-card\">\n\t\t\t\t<p id=\"commit-user\">\n\t\t\t\t\t<Edit size=\"15\" /> {props.commit.commit.author.name}\n\t\t\t\t</p>\n\t\t\t\t<p id=\"date\"> {convertDate(props)}</p>\n\t\t\t</div>\n\t\t\t<p id=\"message\"> {props.commit.commit.message}</p>\n\t\t\t<p>{props.commit.sha}</p>\n\t\t</div>\n\t);\n};\n\nexport default CommitCard;\n","import React from 'react';\nimport CommitCard from '../components/CommitCard.js';\n\nconst Commit = (props) => {\n\tconst mapOverCommits = (props) => props.commits.map((commit) => <CommitCard commit={commit} />);\n\n\treturn <>{mapOverCommits(props)}</>;\n};\n\nexport default Commit;","import React, { Component } from 'react';\nimport Commit from '../container/Commit.js';\n\nclass RepoCard extends Component {\n\tstate = {\n\t\tcommits: [],\n\t\tclicked: false,\n\t};\n\n\tgetTheCommits(company, name) {\n\t\tconst url = `https://api.github.com/repos/${company}/${name}/commits`;\n\t\tfetch(url)\n\t\t\t.then((resp) => resp.json())\n\t\t\t.then((data) =>\n\t\t\t\tthis.setState({\n\t\t\t\t\tcommits: data,\n\t\t\t\t\tclicked: !this.state.clicked,\n\t\t\t\t})\n\t\t\t);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div id=\"repo-card\">\n\t\t\t\t\t<div id=\"logo\">\n\t\t\t\t\t\t<h2>{this.props.repo.name}</h2>\n\t\t\t\t\t\t<img id=\"avatar\" alt=\"logo for the company\" src={this.props.repo.owner.avatar_url}></img>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"language\">\n\t\t\t\t\t\t<span>○ {this.props.repo.language}</span>\n\t\t\t\t\t\t<span>☆ {this.props.repo.stargazers_count}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>Description: {this.props.repo.description}</p>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tid=\"repo-button\"\n\t\t\t\t\t\tonClick={() => this.getTheCommits(this.props.company, this.props.repo.name)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.state.clicked === false ? 'See Recent Commits' : 'Close'}\n\t\t\t\t\t</button>\n\t\t\t\t\t{this.state.clicked === true ? <Commit commits={this.state.commits} /> : null}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default RepoCard;\n","import React, { Component } from 'react';\nimport RepoCard from '../components/RepoCard.js';\n\nclass Repo extends Component {\n\trender() {\n\t\tconst reposSort = () =>\n\t\t\tthis.props.repos.sort(function (a, b) {\n\t\t\t\treturn b.stargazers_count - a.stargazers_count;\n\t\t\t});\n\n\t\tconst mapOverRepos = () => reposSort().map((repo) => <RepoCard repo={repo} company={this.props.company} />);\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<>{mapOverRepos()}</>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Repo;","import React from 'react';\nimport { Github } from '@styled-icons/boxicons-logos/Github';\n\nconst Fetch = () => {\n\treturn (\n\t\t<div id=\"fetch\">\n\t\t\t<h1>\n\t\t\t\tEnter a company and wait while we get those repos. <Github size=\"100\" />\n\t\t\t</h1>\n\t\t</div>\n\t);\n};\n\nexport default Fetch;","import React, { Component } from 'react';\nimport './App.css';\nimport Repo from './container/Repo.js';\nimport { Github } from '@styled-icons/boxicons-logos/Github';\nimport Fetch from './components/Fetch.js';\n\nclass App extends Component {\n\tstate = {\n\t\tcompany: '',\n\t\tcompanyResp: {},\n\t\trepos: [],\n\t\tshow: false,\n\t};\n\n\n\tfetchTheRepos(event) {\n    event.preventDefault();\n\t\tfetch(`https://api.github.com/orgs/${this.state.company}/repos`)\n\t\t\t.then((resp) => resp.json())\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\trepos: data,\n\t\t\t\t});\n\t\t\t});\n\t\tthis.setState({\n\t\t\tshow: true,\n\t\t});\n\t}\n\n\tchangeCompany = (event) => {\n\t\tlet value = event.target.value;\n\t\tthis.setState({\n\t\t\tcompany: value,\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"main\">\n\t\t\t\t<div id=\"header\">\n\t\t\t\t\t<div id=\"netflix-title\">\n\t\t\t\t\t\t{`Github ${this.state.company} Repos`} <Github size=\"40\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<form id=\"form\" onSubmit={(event) => this.fetchTheRepos(event)}>\n\t\t\t\t\t<label for=\"fname\">Enter a Company Name: </label>\n\t\t\t\t\t<input onChange={this.changeCompany} value={this.state.company} />\n\t\t\t\t\t<button id=\"search\">Search</button>\n\t\t\t\t\t<p>Hint: Enter full company name without spaces, ie. \"jpmorganchase\" </p>\n\t\t\t\t</form>\n\t\t\t\t{this.state.repos.length !== 0 ? (\n\t\t\t\t\t<Repo company={this.state.company} repos={this.state.repos} />\n\t\t\t\t) : (\n\t\t\t\t\t<Fetch />\n\t\t\t\t)}\n\t\t\t\t{/* {this.state.show === true ? <Error company={this.state.company} /> : \"\"}  */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}